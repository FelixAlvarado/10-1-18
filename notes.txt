left shift n << i same as n ^ i

promises vs callbacks 

promises are asynchronous callbacks. They are easier to read, and .catch() can be used for mutiple .then() statements. This eliminates err or boilerplate .then can also be chained. 

is nodeJS single threaded? 
IS rails single threaded? 

node: yes 
rails: can be either single or mult depnding on app server and implimentation of rails your'e using. 

Describe HTTP Head and options methods 

Head: indentical to get, but without response body. Useful for checking if get request will return before actually making get request 

options: describes commonication options for the target resource 

main ways to debug in react/ruby/node.js? 

react: react dev tools crhome extension. Can see attributes of componenets, go line by line, and see variables in scrope. 

Ruby: byebug (similar features) 

nodeJS: node --inspect <filename> allows for debugging in chrom dev tools as you would with regular javascript code. postman is used to test for routes. 

SQL problem 

Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

answer 

SELECT
  Score,
  (SELECT count(*) FROM (SELECT distinct Score s FROM Scores) tmp WHERE s >= Score) Rank
FROM Scores
ORDER BY Score desc
